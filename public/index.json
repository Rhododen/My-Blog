[{"content":"\u003cp\u003eHey there!\u003c/p\u003e\n\u003cp\u003eDo you know you don\u0026rsquo;t speak the same language as your computer? While you may be multilingual, your computer only speaks and understands one language. \u003cstrong\u003eBinary\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eRight. You may be able to speak Spanish and English but your computer can only speak ones and zeros.\u003c/p\u003e\n\u003cp\u003eHow do I then make my computer do what I want it to do?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Kernel\u003c/strong\u003e: The kernel is the core of the operating system (Think of the engine in a car). It is responsible for the execution of processes, handling of system operations, and management of system resources amongst other things.  But there is a small problem there - The  kernel \u0026lsquo;understands\u0026rsquo; only binary language, which is basically ones and zeros. So if I want a particular process to be executed, how do I communicate to my kernel to get that done?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Shell\u003c/strong\u003e: It is the shell that acts as the middleman between the user and the kernel. The shell accepts the commands entered in the language recognizable by the user and translates them to binary language for the kernel. Without shells, it is practically impossible for a person to utilise the features and functionality offered by the kernel installed on their system.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Terminal\u003c/em\u003e: The user interacts with the shell through the terminal. This is  where the user enters a written command. The shell then takes those commands and interprets them into binary language which it passes to the kernel. The kernel finally takes the binary language commands and executes the task.\u003c/p\u003e\n\u003cp\u003eThere are different types of shells each with its own set of unique features and functionalities. We have sh, bash, zsh, ksh, fish, and others.\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cimg src=/images/Linux.webp\u003e\n\u003c/div\u003e\n\u003cp\u003eOn Linux-based operating systems, the default shell is the Bash shell which is an acronym for Bourne-Again shell. This may be a major reason why it’s the most popular. Another reason is that Bash is open-source software, meaning that anyone can contribute to its development and improvement and this has brought about a large community of Bash users so you are more likely to get help online whenever you run into a Bash-related problem.\u003c/p\u003e\n\u003cp\u003eFinally, I also want to mention the versatility of Bash. Bash offers a wide range of features and it has amazing shell scripting capabilities. So it’s pretty easy to customize your shell environment and automate your tasks.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eShell prompt vs Shell script\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThere are 2 ways you can pass commands to the shell. You can decide to do it manually, one at a time  and get immediate feedback by using the shell prompt. The shell prompt typically displays information such as the user’s username, hostname and the current working directory.\u003c/p\u003e\n\u003cdiv align=\"center\"\u003e\n    \u003cfigure\u003e\n        \u003cimg src=/images/terminal2.webp\u003e\n        \u003cfigcaption\u003e\u003cem\u003ekc is the username, localhost is the host name, ~ is the home directory(/home/kc)\u003c/em\u003e\u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\u003cp\u003eYou can also pass commands to the shell by writing scripts. A script is a text file that contains a set of commands that can be executed automatically by the shell. Scripting(passing commands via scripts which can be written in different programming languages) allows you automate repetitive tasks and perform operations that require multiple commands\u003c/p\u003e\n\u003cp\u003eI will like to hear your thoughts and your feedbacks. Please feel free to share your thoughts using the contact me section of this website.\u003c/p\u003e\n\u003cp\u003eSee ya!!\u003c/p\u003e\n","description":"","image":"/images/terminal-background.jpg","permalink":"http://example.org/blogs/the-world-of-shells-and-terminals/","title":"The World of Shells and Terminals"},{"content":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways. :zap:\u003c/p\u003e\n\u003ch2 id=\"emoji-support\"\u003eEmoji Support\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://gohugo.io/functions/emojify/\"\u003eemojify\u003c/a\u003e function can be called directly in templates or \u003ca href=\"https://gohugo.io/templates/shortcode-templates/#inline-shortcodes\"\u003eInline Shortcodes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo enable emoji globally, set \u003ccode\u003eenableEmoji\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e in your site’s \u003ca href=\"https://gohugo.io/getting-started/configuration/\"\u003econfiguration\u003c/a\u003e and then you can type emoji shorthand codes directly in content files; e.g.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"http://www.emoji-cheat-sheet.com/\"\u003eEmoji cheat sheet\u003c/a\u003e is a useful reference for emoji shorthand codes.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eN.B.\u003c/strong\u003e The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.emoji {\n  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\n}\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/post.jpg","permalink":"http://example.org/blogs/emoji-support/","title":"Emoji Support"}]